#! env perl 

=head1 general strategy

write a shellscript that

=over

=item finds the lastest rakudo-star distribution

=item if not yet, download it in a subdirectory

=item build one or more implementations of rakudo 

=item symlink the lastest subdirectory to current

=back

=head1 usage

just see the tooth of the beast? 

    perl ./rakudo_install download


want to check what will be done ? 

    perl ./rakudo_install install

you prefer the jvm flavor? or jvm and moar? 

    perl ./rakudo_install install jvm,moar

convinced? 

    perl ./rakudo_install install |
        (cd /whatever/path/you/want
            sh)

so convinced you want to install rakudo on all your production servers? 

    perl ./rakudo_install install > /tmp/faith.sh

    for p ( prod1 prod2 prod3 ) {
        ssh $p sh < /tmp/faith.sh
    }

=head1 put it all together

=head2 in your ~/.zshenv

C<~p6> is where i store all my repos, C<~/local/opt/rakudo> is where i compile
rakudo

    hash -d p6=~/src/perl/6/lib
    export -UT PERL6LIB perl6lib

    path=(
        ~/local/opt/rakudo/current/install/bin(N)
        ~p6/*/bin(N)
        $path
    )


=head2 et voila

    rakudo_install install |
        ( cd ~/local/opt/rakudo; sh )  
    cd ~p6 
    git clone https://github.com/Cofyc/perl6-redis.git

=head1 todo

    * document extra-flags
    * add repo, credits, ...
    * support clone subcommand to git clone https://github.com/rakudo/rakudo.git

=cut

use Modern::Perl;
use autodie;
use Env qw< HOME >;

my $cmd = shift || 'help';

my $xtrace = do {
    if ( $cmd eq 'xtrace' ) {
        $cmd = shift;
        "set -x;"
    }
    else { "" }
};

my @subcommands = qw< help usage check url force install get >;

$cmd ~~ [qw< help usage >] and do {
    say for "subcommand is one of:", @subcommands;
    exit;
};

my @available_dists = sort
    ( qx{curl -sL http://rakudo.org/downloads/star/} =~
                m( (rakudo-star-20\d{2}[.]\d{2})[.]tar[.]gz )xg );

my $current = $available_dists[-1];
my $url = "http://rakudo.org/downloads/star/$current.tar.gz";

$cmd eq 'url' and do {
    say $url;
    exit;
};

my $ready = -d $current;
exit $ready if $cmd eq 'check';

my ( $will_install, $asked_implementations ) = do {
    $cmd eq 'get'     ?
        ( 'false' 
        , [] )
    : $cmd eq 'install' ?
        ( 'true'
        , [ split ','
            , (shift||'moar') ] )
    : die "$cmd subcommand not allowed there";
};

my %commands_to_build =
( parrot =>
    [ [qw< perl Configure.pl  --backends=parrot --gen-parrot --gen-nqp >]
    , [qw< make p-realclean >] ]
, jvm =>
    [ [qw< perl Configure.pl --backends=jvm --gen-nqp >]
    , [qw< make p-realclean >] ]
, moar =>
    [ [qw< perl Configure.pl --backends=moar --gen-moar --gen-nqp >]
    , [qw< make realclean >] ] );

my $build_script =
    join '', map {
        my ( $configure, $clean ) =
            @{ $commands_to_build{$_}
            || die "unknown implementation: $_" };
        join '', map "        $_\n"
            , "@$configure"
            , 'make'
            , 'make install'
            # , "@$clean";
    } @$asked_implementations;

say "# will $cmd $current";
say qq{
    set -e; $xtrace
    test -d $current ||
        { curl -sL $url |
            gzip -cd    |
            tar xf -
        }
    cd $current
    export PERL5LIB=
    export PERL6LIB=
    $will_install && {
$build_script
        cd ..
        rm old || true
        mv current old || true
        ln -s $current current
    }
};
